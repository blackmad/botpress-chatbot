'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (bp) {
  // Tracks new user conversations
  // Used by the following actions:
  // - Get total number of conversations
  bp.dialogEngine.onBeforeCreated((() => {
    var _ref = _asyncToGenerator(function* (ctx, next) {
      const { stateId } = ctx;

      if (!stateId || !stateId.includes(':')) {
        // Unknown platform / can't extract userId
        return next();
      }

      // TODO: implement proper atomic increment
      // and eliminate simultaneous INSERTs that violate
      // unique constraint
      try {
        const convoCount = yield bp.users.getTag(stateId, _common.USER_TAG_CONVO_COUNT);
        yield bp.users.tag(stateId, _common.USER_TAG_CONVO_COUNT, parseInt(convoCount || 0) + 1);
      } catch (err) {
        console.error(err.message);
      }

      next();
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })());

  // Tracks conversation endings and cleans up
  // Used by the following actions:
  // - Get time since last conversation
  // - Conversation data
  bp.dialogEngine.onBeforeEnd((() => {
    var _ref2 = _asyncToGenerator(function* (ctx, next) {
      const { stateId } = ctx;

      if (!stateId || !stateId.includes(':')) {
        // Unknown platform / can't extract userId
        return next();
      }

      // TODO: eliminate simultaneous INSERTs that violate
      // unique constraint
      try {
        const position = yield bp.dialogEngine.getCurrentPosition(stateId);
        yield bp.users.tag(stateId, _common.USER_TAG_CONVO_LAST, position && position.flow);
      } catch (err) {
        console.error(err.message);
      }

      //
      // Cleans up Conversation Storage variables
      //
      const conversationKey = (0, _common.getConversationStorageKey)(stateId, ''); // Empty to delete all variables
      yield (0, _driver.removeStorageKeysStartingWith)(bp, conversationKey);

      next();
    });

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  })());

  // For built-in actions
  bp.dialogEngine.registerActionMetadataProvider(name => {
    if (_metadata2.default[name]) {
      try {
        return _metadata2.default[name];
      } catch (err) {}
    }
    return null;
  });
};

var _common = require('./common');

var _driver = require('./actions/storage/driver');

var _metadata = require('./actions/metadata');

var _metadata2 = _interopRequireDefault(_metadata);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * This method should be called on bot boot in order
 * for the different actions and renderers to work properly.
 *
 * This method will setup and inject different middleware.
 *
 * @param  {Botpress} bp The global Botpress instance
 */
//# sourceMappingURL=setup.js.map