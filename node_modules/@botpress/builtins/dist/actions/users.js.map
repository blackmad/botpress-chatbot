{"version":3,"sources":["../../src/actions/users.js"],"names":["tagUser","bp","state","event","tag","value","users","user","id","Joi","object","keys","string","required","min","max","token","description","any","optional","untagUser","untag","getTimeSinceLastConversation","unit","result","getTag","USER_TAG_CONVO_LAST","tagged_on","Date","since","diff","$r","valid","default","getTotalNumberOfConversations","count","USER_TAG_CONVO_COUNT","parseInt"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEO,MAAMA,4BAAU;AAAA,+BACrB,WAAOC,EAAP,EAAWC,KAAX,EAAkBC,KAAlB,EAAyB,EAAEC,GAAF,EAAOC,KAAP,EAAzB,EAA4C;AAC1C,UAAMJ,GAAGK,KAAH,CAASF,GAAT,CAAaD,MAAMI,IAAN,CAAWC,EAAxB,EAA4BJ,GAA5B,EAAiCC,KAAjC,CAAN;AACD,GAHoB;;AAAA;AAAA;AAAA;AAAA,MAIrBI,cAAIC,MAAJ,GAAaC,IAAb,cACK,oBAAS,OAAT,EAAkB,UAAlB,EAA8B,+DAA9B,CADL;AAEEP,OAAKK,cAAIG,MAAJ,GACFC,QADE,GAEFC,GAFE,CAEE,CAFF,EAGFC,GAHE,CAGE,EAHF,EAIFC,KAJE,GAKFC,WALE,CAKU,mEALV,CAFP;AAQEZ,SAAOI,cAAIS,GAAJ,GACJC,QADI,GAEJF,WAFI,CAEQ,2BAFR;AART,GAJqB,CAAhB;;AAkBA,MAAMG,gCAAY;AAAA,gCACvB,WAAOnB,EAAP,EAAWC,KAAX,EAAkBC,KAAlB,EAAyB,EAAEC,GAAF,EAAzB,EAAqC;AACnC,UAAMH,GAAGK,KAAH,CAASe,KAAT,CAAelB,MAAMI,IAAN,CAAWC,EAA1B,EAA8BJ,GAA9B,CAAN;AACD,GAHsB;;AAAA;AAAA;AAAA;AAAA,MAIvBK,cAAIC,MAAJ,GAAaC,IAAb,cACK,oBAAS,OAAT,EAAkB,iBAAlB,EAAqC,sCAArC,CADL;AAEEP,OAAKK,cAAIG,MAAJ,GACFC,QADE,GAEFC,GAFE,CAEE,CAFF,EAGFC,GAHE,CAGE,EAHF,EAIFC,KAJE,GAKFC,WALE,CAKU,mEALV;AAFP,GAJuB,CAAlB;;AAeA,MAAMK,sEAA+B;AAAA,gCAC1C,WAAOrB,EAAP,EAAWC,KAAX,EAAkBC,KAAlB,EAAyB,EAAEoB,IAAF,EAAzB,EAAsC;AACpC,UAAMC,SAAS,MAAMvB,GAAGK,KAAH,CAASmB,MAAT,CAAgBtB,MAAMI,IAAN,CAAWC,EAA3B,EAA+BkB,2BAA/B,EAAoD,IAApD,CAArB;AACA,UAAMC,YAAaH,UAAUA,OAAOG,SAAlB,IAAgC,IAAIC,IAAJ,EAAlD;AACA,UAAMC,QAAQ,wBAASC,IAAT,CAAc,sBAAOH,SAAP,CAAd,EAAiCJ,IAAjC,CAAd;;AAEA,wBACKrB,KADL;AAEE6B,UAAIF;AAFN;AAID,GAVyC;;AAAA;AAAA;AAAA;AAAA,MAW1CpB,cAAIC,MAAJ,GAAaC,IAAb,cACK,oBACD,OADC,EAED,0CAFC,EAGD,uFAHC,CADL;AAMEY,QAAMd,cAAIG,MAAJ,GACHO,QADG,GAEHa,KAFG,CAEG,CAAC,MAAD,EAAS,OAAT,EAAkB,SAAlB,EAA6B,SAA7B,EAAwC,QAAxC,EAAkD,OAAlD,CAFH,EAGHC,OAHG,CAGK,MAHL,EAIHhB,WAJG,CAIS,2BAJT;AANR,GAX0C,CAArC;;AAyBA,MAAMiB,wEAAgC;AAAA,gCAC3C,WAAOjC,EAAP,EAAWC,KAAX,EAAkBC,KAAlB,EAAyB,EAAEoB,IAAF,EAAzB,EAAsC;AACpC,UAAMY,QAAQ,MAAMlC,GAAGK,KAAH,CAASmB,MAAT,CAAgBtB,MAAMI,IAAN,CAAWC,EAA3B,EAA+B4B,4BAA/B,CAApB;;AAEA,wBACKlC,KADL;AAEE6B,UAAIM,SAASF,SAAS,CAAlB;AAFN;AAID,GAR0C;;AAAA;AAAA;AAAA;AAAA,MAS3C1B,cAAIC,MAAJ,GAAaC,IAAb,cACK,oBACD,OADC,EAED,mCAFC,EAGD,uFAHC,CADL,EAT2C,CAAtC","file":"users.js","sourcesContent":["import Joi from 'joi'\nimport moment from 'moment'\nimport _ from 'lodash'\n\nimport baseAction, { Annotate } from './base'\nimport { USER_TAG_CONVO_COUNT, USER_TAG_CONVO_LAST } from '../common'\n\nexport const tagUser = baseAction(\n  async (bp, state, event, { tag, value }) => {\n    await bp.users.tag(event.user.id, tag, value)\n  },\n  Joi.object().keys({\n    ...Annotate('Users', 'Tag user', 'Tags a user with a specific tag. Useful for segmenting users.'),\n    tag: Joi.string()\n      .required()\n      .min(3)\n      .max(25)\n      .token()\n      .description('The name of the tag. Case insensitive, will always be uppercased.'),\n    value: Joi.any()\n      .optional()\n      .description('Set the value of the tag.')\n  })\n)\n\nexport const untagUser = baseAction(\n  async (bp, state, event, { tag }) => {\n    await bp.users.untag(event.user.id, tag)\n  },\n  Joi.object().keys({\n    ...Annotate('Users', 'Remove user tag', 'Removes the tag from a user, if set.'),\n    tag: Joi.string()\n      .required()\n      .min(3)\n      .max(25)\n      .token()\n      .description('The name of the tag. Case insensitive, will always be uppercased.')\n  })\n)\n\nexport const getTimeSinceLastConversation = baseAction(\n  async (bp, state, event, { unit }) => {\n    const result = await bp.users.getTag(event.user.id, USER_TAG_CONVO_LAST, true)\n    const tagged_on = (result && result.tagged_on) || new Date()\n    const since = moment().diff(moment(tagged_on), unit)\n\n    return {\n      ...state,\n      $r: since\n    }\n  },\n  Joi.object().keys({\n    ...Annotate(\n      'Users',\n      'Get elasped time since last conversation',\n      'Returns the time since last conversation in the unit of your choice. -> (out to `$r`)'\n    ),\n    unit: Joi.string()\n      .optional()\n      .valid(['days', 'hours', 'minutes', 'seconds', 'months', 'years'])\n      .default('days')\n      .description('The unit of time elasped.')\n  })\n)\n\nexport const getTotalNumberOfConversations = baseAction(\n  async (bp, state, event, { unit }) => {\n    const count = await bp.users.getTag(event.user.id, USER_TAG_CONVO_COUNT)\n\n    return {\n      ...state,\n      $r: parseInt(count || 0)\n    }\n  },\n  Joi.object().keys({\n    ...Annotate(\n      'Users',\n      'Get total number of conversations',\n      'Returns the total number of conversations this user had with the bot -> (out to `$r`)'\n    )\n  })\n)\n"]}