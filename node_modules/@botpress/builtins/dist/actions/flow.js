'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wait = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const wait = exports.wait = (0, _base2.default)((() => {
  var _ref = _asyncToGenerator(function* (bp, state, event, { time }) {
    console.log(time, typeof time);
    yield _bluebird2.default.delay(time);
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Flow', 'Wait', 'Waits and do nothing for a given period of time'), {
  time: _joi2.default.number().required().default(1000).min(1).max(60000).description('The amount of time to wait in milliseconds.')
})));
//# sourceMappingURL=flow.js.map