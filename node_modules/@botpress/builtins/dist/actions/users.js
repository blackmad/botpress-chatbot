'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTotalNumberOfConversations = exports.getTimeSinceLastConversation = exports.untagUser = exports.tagUser = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _common = require('../common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const tagUser = exports.tagUser = (0, _base2.default)((() => {
  var _ref = _asyncToGenerator(function* (bp, state, event, { tag, value }) {
    yield bp.users.tag(event.user.id, tag, value);
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Users', 'Tag user', 'Tags a user with a specific tag. Useful for segmenting users.'), {
  tag: _joi2.default.string().required().min(3).max(25).token().description('The name of the tag. Case insensitive, will always be uppercased.'),
  value: _joi2.default.any().optional().description('Set the value of the tag.')
})));

const untagUser = exports.untagUser = (0, _base2.default)((() => {
  var _ref2 = _asyncToGenerator(function* (bp, state, event, { tag }) {
    yield bp.users.untag(event.user.id, tag);
  });

  return function (_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Users', 'Remove user tag', 'Removes the tag from a user, if set.'), {
  tag: _joi2.default.string().required().min(3).max(25).token().description('The name of the tag. Case insensitive, will always be uppercased.')
})));

const getTimeSinceLastConversation = exports.getTimeSinceLastConversation = (0, _base2.default)((() => {
  var _ref3 = _asyncToGenerator(function* (bp, state, event, { unit }) {
    const result = yield bp.users.getTag(event.user.id, _common.USER_TAG_CONVO_LAST, true);
    const tagged_on = result && result.tagged_on || new Date();
    const since = (0, _moment2.default)().diff((0, _moment2.default)(tagged_on), unit);

    return _extends({}, state, {
      $r: since
    });
  });

  return function (_x9, _x10, _x11, _x12) {
    return _ref3.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Users', 'Get elasped time since last conversation', 'Returns the time since last conversation in the unit of your choice. -> (out to `$r`)'), {
  unit: _joi2.default.string().optional().valid(['days', 'hours', 'minutes', 'seconds', 'months', 'years']).default('days').description('The unit of time elasped.')
})));

const getTotalNumberOfConversations = exports.getTotalNumberOfConversations = (0, _base2.default)((() => {
  var _ref4 = _asyncToGenerator(function* (bp, state, event, { unit }) {
    const count = yield bp.users.getTag(event.user.id, _common.USER_TAG_CONVO_COUNT);

    return _extends({}, state, {
      $r: parseInt(count || 0)
    });
  });

  return function (_x13, _x14, _x15, _x16) {
    return _ref4.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Users', 'Get total number of conversations', 'Returns the total number of conversations this user had with the bot -> (out to `$r`)'))));
//# sourceMappingURL=users.js.map