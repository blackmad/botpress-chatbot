'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetGlobalVariable = exports.getGlobalVariable = exports.setGlobalVariable = exports.resetConversationVariable = exports.getConversationVariable = exports.setConversationVariable = exports.resetUserVariable = exports.getUserVariable = exports.setUserVariable = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _base = require('../base');

var _base2 = _interopRequireDefault(_base);

var _common = require('../../common');

var _driver = require('./driver');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const setUserVariable = exports.setUserVariable = (0, _base2.default)((() => {
  var _ref = _asyncToGenerator(function* (bp, state, event, { name, value, expiry }) {
    const userId = event.user.id;
    const key = (0, _common.getUserStorageKey)(userId, name);
    yield (0, _driver.setStorageWithExpiry)(bp, key, value, expiry);
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Set user variable', "Stores a variable under this user's storage, with optional expiry"), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.'),
  value: _joi2.default.any().optional().description('Set the value of the variable.'),
  expiry: _joi2.default.string().optional().default('never').description('Set the expiry of the data, can be "never" or a short string like "6 hours".')
})));

const getUserVariable = exports.getUserVariable = (0, _base2.default)((() => {
  var _ref2 = _asyncToGenerator(function* (bp, state, event, { name, output }) {
    const userId = event.user.id;
    const key = (0, _common.getUserStorageKey)(userId, name);
    const result = yield (0, _driver.getStorageWithExpiry)(bp, key);
    return _extends({}, state, { [output]: result });
  });

  return function (_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Get user variable', "Retrieves a variable for this user, if that data hasn't expired. (out to `$r`)"), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.'),
  output: _joi2.default.string().required().default('$r').regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The state variable to output to')
})));

const resetUserVariable = exports.resetUserVariable = (0, _base2.default)((() => {
  var _ref3 = _asyncToGenerator(function* (bp, state, event, { name }) {
    const userId = event.user.id;
    const key = (0, _common.getUserStorageKey)(userId, name);
    yield (0, _driver.removeStorageKeysStartingWith)(bp, key);
  });

  return function (_x9, _x10, _x11, _x12) {
    return _ref3.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Reset user variable', 'Deletes a user variable'), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.')
})));

const setConversationVariable = exports.setConversationVariable = (0, _base2.default)((() => {
  var _ref4 = _asyncToGenerator(function* (bp, state, event, { name, value, expiry }) {
    const stateId = state && state._stateId || event.stateId || event.user.id;
    const key = (0, _common.getConversationStorageKey)(stateId, name);
    yield (0, _driver.setStorageWithExpiry)(bp, key, value, expiry);
  });

  return function (_x13, _x14, _x15, _x16) {
    return _ref4.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Set conversation variable', "Stores a variable under this conversation's storage, with optional expiry"), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.'),
  value: _joi2.default.any().optional().description('Set the value of the variable.'),
  expiry: _joi2.default.string().optional().default('never').description('Set the expiry of the data, can be "never" or a short string like "6 hours".')
})));

const getConversationVariable = exports.getConversationVariable = (0, _base2.default)((() => {
  var _ref5 = _asyncToGenerator(function* (bp, state, event, { name, output }) {
    const stateId = state && state._stateId || event.stateId || event.user.id;
    const key = (0, _common.getConversationStorageKey)(stateId, name);
    const result = yield (0, _driver.getStorageWithExpiry)(bp, key);
    return _extends({}, state, { [output]: result });
  });

  return function (_x17, _x18, _x19, _x20) {
    return _ref5.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Get conversation variable', "Retrieves a variable for this conversation, if that data hasn't expired. (out to `$r`)"), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.'),
  output: _joi2.default.string().required().default('$r').regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The state variable to output to')
})));

const resetConversationVariable = exports.resetConversationVariable = (0, _base2.default)((() => {
  var _ref6 = _asyncToGenerator(function* (bp, state, event, { name }) {
    const stateId = state && state._stateId || event.stateId || event.user.id;
    const key = (0, _common.getConversationStorageKey)(stateId, name);
    yield (0, _driver.removeStorageKeysStartingWith)(bp, key);
  });

  return function (_x21, _x22, _x23, _x24) {
    return _ref6.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Reset conversation variable', 'Deletes a conversation variable'), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.')
})));

const setGlobalVariable = exports.setGlobalVariable = (0, _base2.default)((() => {
  var _ref7 = _asyncToGenerator(function* (bp, state, event, { name, value, expiry }) {
    const key = (0, _common.getGlobalStorageKey)(name);
    yield (0, _driver.setStorageWithExpiry)(bp, key, value, expiry);
  });

  return function (_x25, _x26, _x27, _x28) {
    return _ref7.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Set global variable', 'Stores a variable globally, with optional expiry'), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.'),
  value: _joi2.default.any().optional().description('Set the value of the variable.'),
  expiry: _joi2.default.string().optional().default('never').description('Set the expiry of the data, can be "never" or a short string like "6 hours".')
})));

const getGlobalVariable = exports.getGlobalVariable = (0, _base2.default)((() => {
  var _ref8 = _asyncToGenerator(function* (bp, state, event, { name, output }) {
    const key = (0, _common.getGlobalStorageKey)(name);
    const result = yield (0, _driver.getStorageWithExpiry)(bp, key);
    return _extends({}, state, { [output]: result });
  });

  return function (_x29, _x30, _x31, _x32) {
    return _ref8.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Get global variable', "Retrieves a global variable, if that data hasn't expired. (out to `$r`)"), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.'),
  output: _joi2.default.string().required().default('$r').regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The state variable to output to')
})));

const resetGlobalVariable = exports.resetGlobalVariable = (0, _base2.default)((() => {
  var _ref9 = _asyncToGenerator(function* (bp, state, event, { name }) {
    const key = (0, _common.getGlobalStorageKey)(name);
    yield (0, _driver.removeStorageKeysStartingWith)(bp, key);
  });

  return function (_x33, _x34, _x35, _x36) {
    return _ref9.apply(this, arguments);
  };
})(), _joi2.default.object().keys(_extends({}, (0, _base.Annotate)('Storage', 'Reset global variable', 'Deletes a global variable'), {
  name: _joi2.default.string().required().regex(/^[a-z0-9_$]+$/i, 'token with allowed $').description('The name of the variable.')
})));
//# sourceMappingURL=index.js.map