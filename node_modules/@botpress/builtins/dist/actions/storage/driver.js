'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeStorageKeysStartingWith = exports.getStorageWithExpiry = exports.setStorageWithExpiry = undefined;

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const boxWithExpiry = (value, expiry = 'never') => {
  const expiryDate = expiry === 'never' ? 'never' : (0, _moment2.default)().add((0, _ms2.default)(expiry), 'milliseconds');

  return { value, expiry: expiryDate };
};

const unboxWithExpiry = box => {
  if (box && box.expiry && (box.expiry === 'never' || (0, _moment2.default)(box.expiry).isAfter())) {
    return box.value;
  }

  return null;
};

const setStorageWithExpiry = exports.setStorageWithExpiry = (() => {
  var _ref = _asyncToGenerator(function* (bp, key, value, expiry) {
    const box = boxWithExpiry(value, expiry);
    yield bp.kvs.set(key, box);
  });

  return function setStorageWithExpiry(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
})();

const getStorageWithExpiry = exports.getStorageWithExpiry = (() => {
  var _ref2 = _asyncToGenerator(function* (bp, key) {
    const box = yield bp.kvs.get(key);
    return unboxWithExpiry(box);
  });

  return function getStorageWithExpiry(_x5, _x6) {
    return _ref2.apply(this, arguments);
  };
})();

const removeStorageKeysStartingWith = exports.removeStorageKeysStartingWith = (() => {
  var _ref3 = _asyncToGenerator(function* (bp, key) {
    const knex = yield bp.db.get();

    yield knex('kvs').where('key', 'like', key + '%').del().then();
  });

  return function removeStorageKeysStartingWith(_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
})();
//# sourceMappingURL=driver.js.map