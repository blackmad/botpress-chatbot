module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = __webpack_require__(2);

var _lodash2 = _interopRequireDefault(_lodash);

var _utilSdk = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var botpress = null;
var config = null;
var INTENT_PREFIX = 'intent:';

var checkCategoryAvailable = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var categories;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return botpress.contentManager.listAvailableCategories().map(function (c) {
              return c.id;
            });

          case 2:
            categories = _context.sent;

            if (categories.includes(config.defaultContentElement)) {
              _context.next = 7;
              break;
            }

            botpress.logger.warn('[Skill/Choice] Configured to use Content Element "' + config.defaultContentElement + '", but it was not found.');

            if (config.defaultContentElement === 'builtin_single-choice') {
              botpress.logger.warn('[Skill/Choice] You should probably install (and use) the @botpress/builtins \nmodule OR change the "defaultContentElement" in this module\'s configuration to use your own content element.');
            }

            return _context.abrupt('return');

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function checkCategoryAvailable() {
    return _ref.apply(this, arguments);
  };
}();

module.exports = {
  config: {
    defaultContentElement: {
      type: 'string',
      required: true,
      default: 'builtin_single-choice',
      env: 'SKILL_CHOICE_CONTENT_ELEMENT'
    },
    defaultContentRenderer: {
      type: 'string',
      required: true,
      default: '#builtin_single-choice',
      env: 'SKILL_CHOICE_CONTENT_RENDERER'
    },
    defaultMaxAttempts: { type: 'string', required: false, default: '3', env: 'SKILL_CHOICE_MAX_ATTEMPTS' },
    matchNumbers: { type: 'bool', required: false, default: true, env: 'SKILL_CHOICE_MATCH_NUMBERS' },
    disableIntegrityCheck: { type: 'bool', required: false, default: false, env: 'SKILL_DISABLE_INTEGRITY_CHECK' },
    matchNLU: { type: 'bool', required: false, default: true, env: 'SKILL_CHOICE_MATCH_NLU' }
  },

  init: function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(bp, configurator) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              botpress = bp;
              _context2.next = 3;
              return configurator.loadAll();

            case 3:
              config = _context2.sent;

            case 4:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function init(_x, _x2) {
      return _ref2.apply(this, arguments);
    }

    return init;
  }(),

  ready: function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(bp, configurator) {
      var router;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!config.disableIntegrityCheck) {
                setTimeout(checkCategoryAvailable, 3000);
              }

              router = bp.getRouter('botpress-skill-choice');


              router.get('/config', function (req, res) {
                res.send(_lodash2.default.pick(config, ['defaultContentElement', 'defaultContentRenderer', 'defaultMaxAttempts', 'matchNumbers']));
              });

              bp.dialogEngine.registerActions({
                '__skill-choice-parse': function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(state, _ref5, data) {
                    var text = _ref5.text,
                        payload = _ref5.payload,
                        nlu = _ref5.nlu;
                    var choice, nb, index, element;
                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            choice = null;
                            nb = _lodash2.default.get(text.match(/^[#).!]?([\d]{1,2})[#).!]?$/), '[1]');

                            if (!(config.matchNumbers && nb)) {
                              _context3.next = 8;
                              break;
                            }

                            index = parseInt(nb) - 1;
                            _context3.next = 6;
                            return botpress.contentManager.getItem(data.contentId);

                          case 6:
                            element = _context3.sent;

                            choice = _lodash2.default.get(element, 'data.choices.' + index + '.value');

                          case 8:

                            if (!choice && config.matchNLU && typeof _lodash2.default.get(nlu, 'intent.is') === 'function') {
                              choice = _lodash2.default.findKey(data.keywords, function (keywords) {
                                var intents = keywords.filter(function (x) {
                                  return x.toLowerCase().startsWith(INTENT_PREFIX);
                                }).map(function (x) {
                                  return x.substr(INTENT_PREFIX.length);
                                });
                                return _lodash2.default.some(intents, function (k) {
                                  return nlu.intent.is(k);
                                });
                              });
                            }

                            if (!choice) {
                              choice = _lodash2.default.findKey(data.keywords, function (keywords) {
                                return _lodash2.default.some(keywords || [], function (k) {
                                  return _lodash2.default.includes(text.toLowerCase(), k.toLowerCase()) || payload && _lodash2.default.includes(payload.toLowerCase(), k.toLowerCase());
                                });
                              });
                            }

                            if (!choice) {
                              _context3.next = 14;
                              break;
                            }

                            return _context3.abrupt('return', _extends({}, state, {
                              'skill-choice-valid': true,
                              'skill-choice-ret': choice
                            }));

                          case 14:
                            return _context3.abrupt('return', _extends({}, state, { 'skill-choice-valid': false }));

                          case 15:
                          case 'end':
                            return _context3.stop();
                        }
                      }
                    }, _callee3, this);
                  }));

                  function __skillChoiceParse(_x5, _x6, _x7) {
                    return _ref4.apply(this, arguments);
                  }

                  return __skillChoiceParse;
                }(),

                '__skill-choice-invalid-inc': function __skillChoiceInvalidInc(state) {
                  var key = 'skill-choice-invalid-count';
                  return _extends({}, state, _defineProperty({}, key, (state[key] || 0) + 1));
                }
              });

            case 4:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function ready(_x3, _x4) {
      return _ref3.apply(this, arguments);
    }

    return ready;
  }(),

  generate: function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(data) {
      var invalidTextData, maxAttempts, flow, transitions;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              invalidTextData = {};

              if (data.config.invalidText && data.config.invalidText.length) {
                invalidTextData.text = data.config.invalidText;
              }

              maxAttempts = data.config.nbMaxRetries || config.defaultMaxAttempts;
              flow = _utilSdk.Skill.Flow({
                nodes: [_utilSdk.Skill.Node({
                  name: 'entry',
                  onEnter: [_utilSdk.Skill.renderElement('#!' + data.contentId, { skill: 'choice' })],
                  next: [{ condition: 'true', node: 'parse' }]
                }), _utilSdk.Skill.Node({
                  name: 'parse',
                  onReceive: [_utilSdk.Skill.runAction('__skill-choice-parse', data)],
                  next: [{ condition: "state['skill-choice-valid'] === true", node: '#' }, { condition: 'true', node: 'invalid' }]
                }), _utilSdk.Skill.Node({
                  name: 'invalid',
                  onEnter: [_utilSdk.Skill.runAction('__skill-choice-invalid-inc')],
                  next: [{ condition: 'state[\'skill-choice-invalid-count\'] <= ' + maxAttempts, node: 'sorry' }, { condition: 'true', node: '#' }]
                }), _utilSdk.Skill.Node({
                  name: 'sorry',
                  onEnter: [_utilSdk.Skill.renderElement('#!' + data.contentId, _extends({}, invalidTextData, { skill: 'choice' }))], // TODO Make property configurable
                  next: [{ condition: 'true', node: 'parse' }]
                })]
              });
              transitions = Object.keys(data.keywords).map(function (choice) {
                var choiceShort = choice.length > 8 ? choice.substr(0, 7) + '...' : choice;

                return {
                  caption: 'User picked [' + choiceShort + ']',
                  condition: 'state[\'skill-choice-ret\'] == "' + choice + '"',
                  node: ''
                };
              });


              transitions.push({
                caption: 'On failure',
                condition: 'true',
                node: ''
              });

              return _context5.abrupt('return', { transitions: transitions, flow: flow });

            case 7:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function generate(_x8) {
      return _ref6.apply(this, arguments);
    }

    return generate;
  }()
};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@botpress/util-sdk");

/***/ })
/******/ ]);
//# sourceMappingURL=node.bundle.js.map